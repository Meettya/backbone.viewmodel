// Generated by CoffeeScript 1.6.2
/*
This is Backbone.ViewModel implementation with attributes mapping and synchronization on demand.
*/


(function() {
  var Backbone, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone = require('backbone');

  _ = require('lodash');

  module.exports = Backbone.ViewModel = (function(_super) {
    __extends(ViewModel, _super);

    function ViewModel(data_in, constructor_attrs, _options_) {
      if (constructor_attrs == null) {
        constructor_attrs = {};
      }
      this._options_ = _options_ != null ? _options_ : {};
      this.update = __bind(this.update, this);
      if (!data_in) {
        throw Error("model or raw data required, but got |" + data_in + "|");
      }
      this.model = data_in instanceof Backbone.Model ? data_in : this._createModelFromRawData(data_in);
      ViewModel.__super__.constructor.call(this, constructor_attrs);
      this._mapping_dictionary_ = this._buildMappingDictionary() || {};
      if (this._options_.autoupdate || this.autoupdate) {
        this.model.on('change', this.update);
      }
      this.update();
    }

    /*
    Public API for synchronization VM with Model
    */


    ViewModel.prototype.update = function() {
      return this._synchronizeWithModel();
    };

    /*
    This method will synchronize ViewModel data with Model data
    NB we are can't to do lazy re-load with @model.changedAttributes
    because keys in _mapping_dictionary_ not one-to-one mapped to model properties
    */


    ViewModel.prototype._synchronizeWithModel = function() {
      var data_source_fn, self_attr, _ref, _results;

      _ref = this._mapping_dictionary_;
      _results = [];
      for (self_attr in _ref) {
        data_source_fn = _ref[self_attr];
        _results.push(this.set(self_attr, _.cloneDeep(data_source_fn())));
      }
      return _results;
    };

    /*
    This method build mapping dictionary with pre-fired function
    */


    ViewModel.prototype._buildMappingDictionary = function() {
      var data_source, res_obj, self_attr, _fn, _ref,
        _this = this;

      if (this.mapping == null) {
        return null;
      }
      res_obj = {};
      _ref = this.mapping;
      _fn = function(self_attr, data_source) {
        return res_obj[self_attr] = (function() {
          var _this = this;

          if ((this[data_source] != null) && _.isFunction(this[data_source])) {
            return function() {
              return _this[data_source]();
            };
          } else if (this.model.has(data_source)) {
            return function() {
              return _this.model.get(data_source);
            };
          } else {
            throw Error("can`t map |" + self_attr + "| to |" + data_source + "| - no self function neither model property");
          }
        }).call(_this);
      };
      for (self_attr in _ref) {
        data_source = _ref[self_attr];
        _fn(self_attr, data_source);
        null;
      }
      return res_obj;
    };

    /*
    This method will create model if we are got raw data
    */


    ViewModel.prototype._createModelFromRawData = function(raw_data) {
      var constructor;

      constructor = this.constructor.prototype.model == null ? Backbone.Model : this.constructor.prototype.model;
      return new constructor(raw_data);
    };

    return ViewModel;

  })(Backbone.Model);

}).call(this);
